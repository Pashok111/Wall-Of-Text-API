"""
This module contains the implementation of a text database using SQLAlchemy.

The `Text` class represents individual texts in the database.
Each text has attributes such as ID, parent ID, username, text content,
and creation timestamp (UTC). ID and creation timestamp are automatically
generated by the database.

To use this module, you need to install the required dependencies:

- sqlalchemy

You can find more information about the project on GitHub:
https://github.com/Pashok111/wall-of-text-api

Example usage:

>>> from api_versions.v1.database_v1 import Text

>>> new_text = Text(
>>>     parent_id=1,
>>>     username="user1",
>>>     text="Hello, world!"
>>> )
"""

# Other imports
import os
from datetime import datetime, UTC

# Main imports
from dotenv import load_dotenv
from sqlalchemy import create_engine, Column, Integer, String, DateTime
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker

# Config loading
load_dotenv()
db_file = os.path.join(
    os.getenv("DB_N_LOGS_FOLDER", "db_n_logs"),
    os.getenv("DB_FILE", "wall_of_text.db")
)
if not db_file.endswith(".db"):
    db_file += ".db"
SQLALCHEMY_DATABASE_URL = f"sqlite:///{db_file}"

engine = create_engine(SQLALCHEMY_DATABASE_URL)
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)

Base = declarative_base()


class Text(Base):
    """
    The `Text` class represents individual texts in the database.

    Attributes:
    - id (int): The unique identifier of the text.
    - parent_id (int, optional): The ID of the parent text. Defaults to -1.
    - username (str): The username associated with the text.
    - text (str): The content of the text.
    - utc_created_at (datetime): The creation timestamp of the text in UTC.

    Example usage:

    new_text = Text(parent_id=1, username="user1", text="Hello, world!")
    """
    __tablename__ = "texts"

    id = Column(Integer, primary_key=True, index=True)
    parent_id = Column(Integer, index=True, default=-1)
    username = Column(String, index=True)
    text = Column(String, index=True)
    utc_created_at: datetime = Column(
        DateTime, default=lambda: datetime.now(UTC)
    )

    def __str__(self):
        return (f"Text ID: {self.id}\n"
                f"Parent ID: {self.parent_id}\n"
                f"Username: {self.username}\n"
                f"Text: {self.text}\n"
                f"Created at (UTC): {self.utc_created_at}")

    def __repr__(self):
        return (f"Text(id={self.id}, "
                f"parent_id={self.parent_id}, "
                f"username={self.username}, "
                f"text={self.text}, "
                f"utc_created_at={self.utc_created_at})")


Base.metadata.create_all(bind=engine)
