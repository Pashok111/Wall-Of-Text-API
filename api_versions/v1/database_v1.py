"""
This module contains the implementation of a text database using SQLAlchemy.

The `Text` class represents individual texts in the database.
Each text has attributes such as ID, parent ID, username, text content,
and creation timestamp (UTC). ID and creation timestamp are automatically
generated by the database.

To use this module, you need to install the required dependencies:

- sqlalchemy

- tomli (if you're using Python < 3.11)

You can find more information about the project on GitHub:
https://github.com/Pashok111/wall-of-text-api

Example usage:

>>> from api_versions.v1.database_v1 import Text

>>> new_text = Text(
>>>     parent_id=1,
>>>     username="user1",
>>>     text="Hello, world!"
>>> )
"""

# Other imports
import sys
from datetime import datetime, UTC

# Main imports
from sqlalchemy import create_engine, Column, Integer, String, DateTime
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker

# TOML import
if sys.version_info < (3, 11):
    try:
        import tomli as tomllib  # noqa
    except ImportError as ex:
        raise ImportError("tomli is required for Python < 3.11") from ex # noqa
else:
    import tomllib

# Config loading
try:
    with open("config.toml", "rb") as f:
        config = tomllib.load(f)
except FileNotFoundError:
    raise FileNotFoundError("config.toml not found")

db_file = config["db_file"]
if not db_file:
    raise ValueError("db_file is not specified in config.toml")
if not db_file.endswith(".db"):
    db_file += ".db"
SQLALCHEMY_DATABASE_URL = f"sqlite:///{db_file}"

engine = create_engine(SQLALCHEMY_DATABASE_URL)
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)

Base = declarative_base()


class Text(Base):
    """
    The `Text` class represents individual texts in the database.

    Attributes:
    - id (int): The unique identifier of the text.
    - parent_id (int, optional): The ID of the parent text. Defaults to -1.
    - username (str): The username associated with the text.
    - text (str): The content of the text.
    - utc_created_at (datetime): The creation timestamp of the text in UTC.

    Example usage:

    new_text = Text(parent_id=1, username="user1", text="Hello, world!")
    """
    __tablename__ = "texts"

    id = Column(Integer, primary_key=True, index=True)
    parent_id = Column(Integer, index=True, default=-1)
    username = Column(String, index=True)
    text = Column(String, index=True)
    utc_created_at: datetime = Column(
        DateTime, default=lambda: datetime.now(UTC)
    )

    def __str__(self):
        return (f"Text ID: {self.id}\n"
                f"Parent ID: {self.parent_id}\n"
                f"Username: {self.username}\n"
                f"Text: {self.text}\n"
                f"Created at (UTC): {self.utc_created_at}")

    def __repr__(self):
        return (f"Text(id={self.id}, "
                f"parent_id={self.parent_id}, "
                f"username={self.username}, "
                f"text={self.text}, "
                f"utc_created_at={self.utc_created_at})")


Base.metadata.create_all(bind=engine)
